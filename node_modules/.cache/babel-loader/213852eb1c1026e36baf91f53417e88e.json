{"ast":null,"code":"import { apiClient } from \"../apiClient\";\nimport { toast } from \"react-toastify\";\nimport { endpoints } from \"../configs\";\nimport { fetchList } from \"./table\";\nimport { REQUEST_CREATE_NEW_USER, RECEIVE_CREATE_NEW_USER, NEW_USER_CREATE_ERROR } from \"../constants/ActionTypes\";\n/**\n * Request for creating new user\n */\n\nexport function requestCreateNewUser() {\n  return {\n    type: REQUEST_CREATE_NEW_USER\n  };\n}\n/**\n * Receive for creating new user\n */\n\nexport function receiveCreateNewUser() {\n  return {\n    type: RECEIVE_CREATE_NEW_USER\n  };\n}\n/**\n * Receive for error creating new user\n */\n\nexport function newUserCreateError(error) {\n  return {\n    type: NEW_USER_CREATE_ERROR,\n    error: error\n  };\n}\n/**\n * Create New User\n *\n * @param data\n * @returns {function(*): Promise<AxiosResponse<any>>}\n */\n\nexport function addNewUser(data) {\n  return function (dispatch) {\n    dispatch(requestCreateNewUser());\n    return apiClient.post(endpoints().userAPI, data).then(function (response) {\n      var successMessage;\n\n      if (response && response.data) {\n        successMessage = response.data.message;\n      }\n    }).then(function () {\n      dispatch(fetchList(\"users\", \"\".concat(endpoints().userAPI), 1, 10, {\n        search: \"\",\n        sort: \"\",\n        sortDir: \"\",\n        pagination: true\n      })); //dispatch(fetchList(\"Super Admin\", `${endpoints().userAPI}`, 1, 10));\n\n      dispatch(receiveCreateNewUser());\n    }).catch(function (error) {\n      dispatch(newUserCreateError(error));\n\n      if (error.response && error.response.status >= 400) {\n        var errorMessage;\n        var errorRequest = error.response.request;\n\n        if (errorRequest && errorRequest.response) {\n          errorMessage = JSON.parse(errorRequest.response).message;\n        }\n\n        toast.error(errorMessage);\n        console.error(errorMessage);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/home/anbuthidiff/admin-forntend/src/actions/user.js"],"names":["apiClient","toast","endpoints","fetchList","REQUEST_CREATE_NEW_USER","RECEIVE_CREATE_NEW_USER","NEW_USER_CREATE_ERROR","requestCreateNewUser","type","receiveCreateNewUser","newUserCreateError","error","addNewUser","data","dispatch","post","userAPI","then","response","successMessage","message","search","sort","sortDir","pagination","catch","status","errorMessage","errorRequest","request","JSON","parse","console"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,SAAT,QAA0B,SAA1B;AAEA,SACEC,uBADF,EAEEC,uBAFF,EAGEC,qBAHF,QAIO,0BAJP;AAMA;;;;AAGA,OAAO,SAASC,oBAAT,GAAgC;AACrC,SAAO;AACLC,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;AAED;;;;AAGA,OAAO,SAASK,oBAAT,GAAgC;AACrC,SAAO;AACLD,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD;AAED;;;;AAGA,OAAO,SAASK,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,SAAO;AACLH,IAAAA,IAAI,EAAEF,qBADD;AAELK,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED;;;;;;;AAMA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,SAAO,UAACC,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAACP,oBAAoB,EAArB,CAAR;AAEA,WAAOP,SAAS,CACbe,IADI,CACCb,SAAS,GAAGc,OADb,EACsBH,IADtB,EAEJI,IAFI,CAEC,UAACC,QAAD,EAAc;AAClB,UAAIC,cAAJ;;AACA,UAAID,QAAQ,IAAIA,QAAQ,CAACL,IAAzB,EAA+B;AAC7BM,QAAAA,cAAc,GAAGD,QAAQ,CAACL,IAAT,CAAcO,OAA/B;AACD;AACF,KAPI,EAQJH,IARI,CAQC,YAAM;AACVH,MAAAA,QAAQ,CACNX,SAAS,CAAC,OAAD,YAAaD,SAAS,GAAGc,OAAzB,GAAoC,CAApC,EAAuC,EAAvC,EAA2C;AAClDK,QAAAA,MAAM,EAAE,EAD0C;AAElDC,QAAAA,IAAI,EAAE,EAF4C;AAGlDC,QAAAA,OAAO,EAAE,EAHyC;AAIlDC,QAAAA,UAAU,EAAE;AAJsC,OAA3C,CADH,CAAR,CADU,CASV;;AACAV,MAAAA,QAAQ,CAACL,oBAAoB,EAArB,CAAR;AACD,KAnBI,EAoBJgB,KApBI,CAoBE,UAACd,KAAD,EAAW;AAChBG,MAAAA,QAAQ,CAACJ,kBAAkB,CAACC,KAAD,CAAnB,CAAR;;AAEA,UAAIA,KAAK,CAACO,QAAN,IAAkBP,KAAK,CAACO,QAAN,CAAeQ,MAAf,IAAyB,GAA/C,EAAoD;AAClD,YAAIC,YAAJ;AACA,YAAMC,YAAY,GAAGjB,KAAK,CAACO,QAAN,CAAeW,OAApC;;AACA,YAAID,YAAY,IAAIA,YAAY,CAACV,QAAjC,EAA2C;AACzCS,UAAAA,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACV,QAAxB,EAAkCE,OAAjD;AACD;;AACDnB,QAAAA,KAAK,CAACU,KAAN,CAAYgB,YAAZ;AACAK,QAAAA,OAAO,CAACrB,KAAR,CAAcgB,YAAd;AACD;AACF,KAhCI,CAAP;AAiCD,GApCD;AAqCD","sourcesContent":["import { apiClient } from \"../apiClient\";\nimport { toast } from \"react-toastify\";\nimport { endpoints } from \"../configs\";\nimport { fetchList } from \"./table\";\n\nimport {\n  REQUEST_CREATE_NEW_USER,\n  RECEIVE_CREATE_NEW_USER,\n  NEW_USER_CREATE_ERROR,\n} from \"../constants/ActionTypes\";\n\n/**\n * Request for creating new user\n */\nexport function requestCreateNewUser() {\n  return {\n    type: REQUEST_CREATE_NEW_USER,\n  };\n}\n\n/**\n * Receive for creating new user\n */\nexport function receiveCreateNewUser() {\n  return {\n    type: RECEIVE_CREATE_NEW_USER,\n  };\n}\n\n/**\n * Receive for error creating new user\n */\nexport function newUserCreateError(error) {\n  return {\n    type: NEW_USER_CREATE_ERROR,\n    error,\n  };\n}\n\n/**\n * Create New User\n *\n * @param data\n * @returns {function(*): Promise<AxiosResponse<any>>}\n */\nexport function addNewUser(data) {\n  return (dispatch) => {\n    dispatch(requestCreateNewUser());\n\n    return apiClient\n      .post(endpoints().userAPI, data)\n      .then((response) => {\n        let successMessage;\n        if (response && response.data) {\n          successMessage = response.data.message;\n        }\n      })\n      .then(() => {\n        dispatch(\n          fetchList(\"users\", `${endpoints().userAPI}`, 1, 10, {\n            search: \"\",\n            sort: \"\",\n            sortDir: \"\",\n            pagination: true,\n          })\n        );\n        //dispatch(fetchList(\"Super Admin\", `${endpoints().userAPI}`, 1, 10));\n        dispatch(receiveCreateNewUser());\n      })\n      .catch((error) => {\n        dispatch(newUserCreateError(error));\n\n        if (error.response && error.response.status >= 400) {\n          let errorMessage;\n          const errorRequest = error.response.request;\n          if (errorRequest && errorRequest.response) {\n            errorMessage = JSON.parse(errorRequest.response).message;\n          }\n          toast.error(errorMessage);\n          console.error(errorMessage);\n        }\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}