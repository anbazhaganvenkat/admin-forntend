{"ast":null,"code":"import axios from \"axios\"; // Configs\n\nimport { API_URL } from \"../constants/Config\";\nimport { DEFAULT_API_KEY } from \"../configs\"; // Helper\n\nimport { getCookie } from \"../lib/helper\"; // History\n\nimport history from \"../history\";\nexport var apiClient = axios.create({\n  baseURL: API_URL,\n  timeout: 20000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    common: {\n      //set token for authorization\n      Authorization: getCookie(\"session_token\")\n    }\n  }\n});\nexport function get(url, callback) {\n  fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: getCookie(\"session_token\"),\n      Pragma: \"no-cache\"\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw Error(response.status);\n    }\n\n    return response.json();\n  }).then(function (result) {\n    return callback(null, result);\n  }).catch(function (err) {\n    return callback(err);\n  });\n} // Call Post API Public API\n\nexport function apiClientPostPublic(apiUrl, data, callback) {\n  apiClient.defaults.headers.common.Authorization = DEFAULT_API_KEY;\n  apiClient.post(\"\".concat(apiUrl), data).then(function (response) {\n    var successMessage;\n\n    if (response && response.data) {\n      successMessage = response.data.message;\n    }\n\n    return callback(null, successMessage);\n  }).catch(function (error) {\n    var errorMessage;\n\n    if (error && error.response && error.response.status === 401) {\n      history.push(\"/login\");\n    } else if (error.response && error.response.status >= 400) {\n      var errorRequest = error.response.request;\n\n      if (errorRequest && errorRequest.response) {\n        errorMessage = JSON.parse(errorRequest.response).message;\n      }\n\n      console.error(errorMessage);\n      return callback(errorMessage);\n    }\n  });\n}","map":{"version":3,"sources":["/home/anbuthidiff/admin-forntend/src/apiClient/index.js"],"names":["axios","API_URL","DEFAULT_API_KEY","getCookie","history","apiClient","create","baseURL","timeout","headers","common","Authorization","get","url","callback","fetch","method","Pragma","then","response","ok","Error","status","json","result","catch","err","apiClientPostPublic","apiUrl","data","defaults","post","successMessage","message","error","errorMessage","push","errorRequest","request","JSON","parse","console"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,eAAT,QAAgC,YAAhC,C,CAEA;;AACA,SAASC,SAAT,QAA0B,eAA1B,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,IAAMC,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAa;AACpCC,EAAAA,OAAO,EAAEN,OAD2B;AAEpCO,EAAAA,OAAO,EAAE,KAF2B;AAGpCC,EAAAA,OAAO,EAAE;AACP,oBAAgB,kBADT;AAEPC,IAAAA,MAAM,EAAE;AACN;AACAC,MAAAA,aAAa,EAAER,SAAS,CAAC,eAAD;AAFlB;AAFD;AAH2B,CAAb,CAAlB;AAYP,OAAO,SAASS,GAAT,CAAaC,GAAb,EAAkBC,QAAlB,EAA4B;AACjCC,EAAAA,KAAK,CAACF,GAAD,EAAM;AACTG,IAAAA,MAAM,EAAE,KADC;AAETP,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPE,MAAAA,aAAa,EAAER,SAAS,CAAC,eAAD,CAFjB;AAGPc,MAAAA,MAAM,EAAE;AAHD;AAFA,GAAN,CAAL,CAQGC,IARH,CAQQ,UAAAC,QAAQ,EAAI;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAMC,KAAK,CAACF,QAAQ,CAACG,MAAV,CAAX;AACD;;AACD,WAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,GAbH,EAcGL,IAdH,CAcQ,UAAAM,MAAM;AAAA,WAAIV,QAAQ,CAAC,IAAD,EAAOU,MAAP,CAAZ;AAAA,GAdd,EAeGC,KAfH,CAeS,UAAAC,GAAG;AAAA,WAAIZ,QAAQ,CAACY,GAAD,CAAZ;AAAA,GAfZ;AAgBD,C,CAED;;AACA,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCC,IAArC,EAA2Cf,QAA3C,EAAqD;AAC1DT,EAAAA,SAAS,CAACyB,QAAV,CAAmBrB,OAAnB,CAA2BC,MAA3B,CAAkCC,aAAlC,GAAkDT,eAAlD;AACAG,EAAAA,SAAS,CACN0B,IADH,WACWH,MADX,GACqBC,IADrB,EAEGX,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChB,QAAIa,cAAJ;;AACA,QAAIb,QAAQ,IAAIA,QAAQ,CAACU,IAAzB,EAA+B;AAC7BG,MAAAA,cAAc,GAAGb,QAAQ,CAACU,IAAT,CAAcI,OAA/B;AACD;;AACD,WAAOnB,QAAQ,CAAC,IAAD,EAAOkB,cAAP,CAAf;AACD,GARH,EASGP,KATH,CASS,UAAAS,KAAK,EAAI;AACd,QAAIC,YAAJ;;AACA,QAAID,KAAK,IAAIA,KAAK,CAACf,QAAf,IAA2Be,KAAK,CAACf,QAAN,CAAeG,MAAf,KAA0B,GAAzD,EAA8D;AAC5DlB,MAAAA,OAAO,CAACgC,IAAR,CAAa,QAAb;AACD,KAFD,MAEO,IAAIF,KAAK,CAACf,QAAN,IAAkBe,KAAK,CAACf,QAAN,CAAeG,MAAf,IAAyB,GAA/C,EAAoD;AACzD,UAAMe,YAAY,GAAGH,KAAK,CAACf,QAAN,CAAemB,OAApC;;AACA,UAAID,YAAY,IAAIA,YAAY,CAAClB,QAAjC,EAA2C;AACzCgB,QAAAA,YAAY,GAAGI,IAAI,CAACC,KAAL,CAAWH,YAAY,CAAClB,QAAxB,EAAkCc,OAAjD;AACD;;AACDQ,MAAAA,OAAO,CAACP,KAAR,CAAcC,YAAd;AACA,aAAOrB,QAAQ,CAACqB,YAAD,CAAf;AACD;AACF,GArBH;AAsBD","sourcesContent":["import axios from \"axios\";\n\n// Configs\nimport { API_URL } from \"../constants/Config\";\nimport { DEFAULT_API_KEY } from \"../configs\";\n\n// Helper\nimport { getCookie } from \"../lib/helper\";\n\n// History\nimport history from \"../history\";\n\nexport const apiClient = axios.create({\n  baseURL: API_URL,\n  timeout: 20000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    common: {\n      //set token for authorization\n      Authorization: getCookie(\"session_token\")\n    }\n  }\n});\n\nexport function get(url, callback) {\n  fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: getCookie(\"session_token\"),\n      Pragma: \"no-cache\"\n    }\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.status);\n      }\n      return response.json();\n    })\n    .then(result => callback(null, result))\n    .catch(err => callback(err));\n}\n\n// Call Post API Public API\nexport function apiClientPostPublic(apiUrl, data, callback) {\n  apiClient.defaults.headers.common.Authorization = DEFAULT_API_KEY;\n  apiClient\n    .post(`${apiUrl}`, data)\n    .then(response => {\n      let successMessage;\n      if (response && response.data) {\n        successMessage = response.data.message;\n      }\n      return callback(null, successMessage);\n    })\n    .catch(error => {\n      let errorMessage;\n      if (error && error.response && error.response.status === 401) {\n        history.push(\"/login\");\n      } else if (error.response && error.response.status >= 400) {\n        const errorRequest = error.response.request;\n        if (errorRequest && errorRequest.response) {\n          errorMessage = JSON.parse(errorRequest.response).message;\n        }\n        console.error(errorMessage);\n        return callback(errorMessage);\n      }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}