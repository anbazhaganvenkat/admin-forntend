{"ast":null,"code":"import Notifications from \"react-notification-system-redux\";\nimport { apiClient } from \"../apiClient\";\nimport { REQUEST_TABLE_LIST, RECEIVE_TABLE_LIST, FETCH_TABLE_LIST_FAIL, SET_TABLE_PAGE, CLEAR_TABLE_LIST } from \"../constants/ActionTypes\";\n/**\n * Request table list\n *\n * @param {*} id\n */\n\nfunction requestTableList(id) {\n  return {\n    type: REQUEST_TABLE_LIST,\n    id: id\n  };\n}\n/**\n * Receive table list\n *\n * @param {*} id\n * @param {*} payload\n */\n\n\nfunction receiveTableList(id, payload) {\n  return {\n    type: RECEIVE_TABLE_LIST,\n    id: id,\n    payload: payload\n  };\n}\n/**\n * Fetch table list fail\n *\n * @param {*} id\n */\n\n\nfunction fetchTableListFail(id) {\n  return {\n    type: FETCH_TABLE_LIST_FAIL,\n    id: id\n  };\n}\n/**\n * Clear table list\n *\n * @param {*} id\n */\n\n\nexport function clearTableList(id) {\n  return {\n    type: CLEAR_TABLE_LIST,\n    id: id\n  };\n}\n/**\n * Set table page\n *\n * @param {*} id\n * @param {*} payload\n */\n\nexport function setTablePage(id, payload) {\n  return {\n    type: SET_TABLE_PAGE,\n    id: id,\n    payload: payload\n  };\n}\n/**\n * Fetch list\n *\n * @param {*} id\n * @param {*} apiUrl\n * @param {*} page\n * @param {*} pageSize\n * @param {*} params\n */\n\nexport function fetchList(id, apiUrl, page, pageSize) {\n  var params = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var queryString = [];\n\n  if (page) {\n    queryString.push(\"page=\".concat(page));\n  }\n\n  if (pageSize) {\n    queryString.push(\"pageSize=\".concat(pageSize));\n  }\n\n  Object.keys(params).forEach(function (param) {\n    queryString.push(\"\".concat(param, \"=\").concat(params[param]));\n  });\n  apiUrl = \"\".concat(apiUrl, \"?\").concat(queryString.join(\"&\"));\n  return function (dispatch) {\n    dispatch(requestTableList(id));\n    return apiClient.get(\"\".concat(apiUrl)).then(function (response) {\n      return response.data;\n    }).then(function (list) {\n      dispatch(receiveTableList(id, list));\n    }).catch(function (error) {\n      dispatch(fetchTableListFail(id));\n\n      if (error.status >= 400) {\n        dispatch(Notifications.error({\n          title: \"Fetch List \".concat(id, \" fail\"),\n          message: \"error\",\n          autoDismiss: 3\n        }));\n        throw new Error(\"Bad response from server\");\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/home/anbuthidiff/admin-forntend/src/actions/table.js"],"names":["Notifications","apiClient","REQUEST_TABLE_LIST","RECEIVE_TABLE_LIST","FETCH_TABLE_LIST_FAIL","SET_TABLE_PAGE","CLEAR_TABLE_LIST","requestTableList","id","type","receiveTableList","payload","fetchTableListFail","clearTableList","setTablePage","fetchList","apiUrl","page","pageSize","params","queryString","push","Object","keys","forEach","param","join","dispatch","get","then","response","data","list","catch","error","status","title","message","autoDismiss","Error"],"mappings":"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","sourcesContent":["import Notifications from \"react-notification-system-redux\";\nimport { apiClient } from \"../apiClient\";\n\nimport {\n  REQUEST_TABLE_LIST,\n  RECEIVE_TABLE_LIST,\n  FETCH_TABLE_LIST_FAIL,\n  SET_TABLE_PAGE,\n  CLEAR_TABLE_LIST\n} from \"../constants/ActionTypes\";\n\n/**\n * Request table list\n *\n * @param {*} id\n */\nfunction requestTableList(id) {\n  return { type: REQUEST_TABLE_LIST, id };\n}\n/**\n * Receive table list\n *\n * @param {*} id\n * @param {*} payload\n */\nfunction receiveTableList(id, payload) {\n  return { type: RECEIVE_TABLE_LIST, id, payload };\n}\n\n/**\n * Fetch table list fail\n *\n * @param {*} id\n */\nfunction fetchTableListFail(id) {\n  return { type: FETCH_TABLE_LIST_FAIL, id };\n}\n\n/**\n * Clear table list\n *\n * @param {*} id\n */\nexport function clearTableList(id) {\n  return { type: CLEAR_TABLE_LIST, id };\n}\n\n/**\n * Set table page\n *\n * @param {*} id\n * @param {*} payload\n */\nexport function setTablePage(id, payload) {\n  return { type: SET_TABLE_PAGE, id, payload };\n}\n\n/**\n * Fetch list\n *\n * @param {*} id\n * @param {*} apiUrl\n * @param {*} page\n * @param {*} pageSize\n * @param {*} params\n */\nexport function fetchList(id, apiUrl, page, pageSize, params = {}) {\n  const queryString = [];\n  if (page) {\n    queryString.push(`page=${page}`);\n  }\n\n  if (pageSize) {\n    queryString.push(`pageSize=${pageSize}`);\n  }\n\n  Object.keys(params).forEach(param => {\n    queryString.push(`${param}=${params[param]}`);\n  });\n\n  apiUrl = `${apiUrl}?${queryString.join(\"&\")}`;\n\n  return dispatch => {\n    dispatch(requestTableList(id));\n\n    return apiClient\n      .get(`${apiUrl}`)\n      .then(response => response.data)\n      .then(list => {\n        dispatch(receiveTableList(id, list));\n      })\n      .catch(error => {\n        dispatch(fetchTableListFail(id));\n\n        if (error.status >= 400) {\n          dispatch(\n            Notifications.error({\n              title: `Fetch List ${id} fail`,\n              message: \"error\",\n              autoDismiss: 3\n            })\n          );\n          throw new Error(\"Bad response from server\");\n        }\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}