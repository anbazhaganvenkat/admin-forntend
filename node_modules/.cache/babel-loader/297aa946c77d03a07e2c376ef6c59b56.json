{"ast":null,"code":"import _defineProperty from \"/home/anbuthidiff/admin-forntend/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/anbuthidiff/admin-forntend/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { REQUEST_TABLE_LIST, RECEIVE_TABLE_LIST, FETCH_TABLE_LIST_FAIL, SET_TABLE_PAGE, CLEAR_TABLE_LIST } from \"../constants/ActionTypes\";\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var id = action.id,\n      payload = action.payload,\n      type = action.type;\n\n  switch (type) {\n    // Clear table list\n    case CLEAR_TABLE_LIST:\n      {\n        delete state[id];\n        return state;\n      }\n    // Request table list\n\n    case REQUEST_TABLE_LIST:\n      return _objectSpread({}, state, _defineProperty({}, id, Object.assign({}, state[id], {\n        isFetching: true\n      })));\n    // Recieve table list\n\n    case RECEIVE_TABLE_LIST:\n      return _objectSpread({}, state, _defineProperty({}, id, Object.assign({}, state[id], _defineProperty({\n        isFetching: false,\n        currentPage: payload.currentPage,\n        totalCount: payload.totalCount,\n        pageSize: payload.pageSize\n      }, payload.currentPage, payload.data))));\n    // Set table page\n\n    case SET_TABLE_PAGE:\n      return _objectSpread({}, state, _defineProperty({}, id, Object.assign({}, state[id], {\n        currentPage: payload\n      })));\n    // Fetch table list error\n\n    case FETCH_TABLE_LIST_FAIL:\n      return _objectSpread({}, state, _defineProperty({}, id, Object.assign({}, state[id], {\n        isFetching: false\n      })));\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/anbuthidiff/admin-forntend/src/reducers/table.js"],"names":["REQUEST_TABLE_LIST","RECEIVE_TABLE_LIST","FETCH_TABLE_LIST_FAIL","SET_TABLE_PAGE","CLEAR_TABLE_LIST","state","action","id","payload","type","Object","assign","isFetching","currentPage","totalCount","pageSize","data"],"mappings":";;AAAA,SACEA,kBADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,gBALF,QAMO,0BANP;AAQA,gBAAe,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;AAAA,MAC7BC,EAD6B,GACPD,MADO,CAC7BC,EAD6B;AAAA,MACzBC,OADyB,GACPF,MADO,CACzBE,OADyB;AAAA,MAChBC,IADgB,GACPH,MADO,CAChBG,IADgB;;AAErC,UAAQA,IAAR;AACE;AACA,SAAKL,gBAAL;AAAuB;AACrB,eAAOC,KAAK,CAACE,EAAD,CAAZ;AACA,eAAOF,KAAP;AACD;AACD;;AACA,SAAKL,kBAAL;AACE,+BACKK,KADL,sBAEGE,EAFH,EAEQG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAK,CAACE,EAAD,CAAvB,EAA6B;AAAEK,QAAAA,UAAU,EAAE;AAAd,OAA7B,CAFR;AAIF;;AACA,SAAKX,kBAAL;AACE,+BACKI,KADL,sBAEGE,EAFH,EAEQG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAK,CAACE,EAAD,CAAvB;AACJK,QAAAA,UAAU,EAAE,KADR;AAEJC,QAAAA,WAAW,EAAEL,OAAO,CAACK,WAFjB;AAGJC,QAAAA,UAAU,EAAEN,OAAO,CAACM,UAHhB;AAIJC,QAAAA,QAAQ,EAAEP,OAAO,CAACO;AAJd,SAKHP,OAAO,CAACK,WALL,EAKmBL,OAAO,CAACQ,IAL3B,EAFR;AAUF;;AACA,SAAKb,cAAL;AACE,+BACKE,KADL,sBAEGE,EAFH,EAEQG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAK,CAACE,EAAD,CAAvB,EAA6B;AACjCM,QAAAA,WAAW,EAAEL;AADoB,OAA7B,CAFR;AAMF;;AACA,SAAKN,qBAAL;AACE,+BACKG,KADL,sBAEGE,EAFH,EAEQG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAK,CAACE,EAAD,CAAvB,EAA6B;AAAEK,QAAAA,UAAU,EAAE;AAAd,OAA7B,CAFR;;AAIF;AACE,aAAOP,KAAP;AAvCJ;AAyCD,CA3CD","sourcesContent":["import {\n  REQUEST_TABLE_LIST,\n  RECEIVE_TABLE_LIST,\n  FETCH_TABLE_LIST_FAIL,\n  SET_TABLE_PAGE,\n  CLEAR_TABLE_LIST\n} from \"../constants/ActionTypes\";\n\nexport default (state = {}, action) => {\n  const { id, payload, type } = action;\n  switch (type) {\n    // Clear table list\n    case CLEAR_TABLE_LIST: {\n      delete state[id];\n      return state;\n    }\n    // Request table list\n    case REQUEST_TABLE_LIST:\n      return {\n        ...state,\n        [id]: Object.assign({}, state[id], { isFetching: true })\n      };\n    // Recieve table list\n    case RECEIVE_TABLE_LIST:\n      return {\n        ...state,\n        [id]: Object.assign({}, state[id], {\n          isFetching: false,\n          currentPage: payload.currentPage,\n          totalCount: payload.totalCount,\n          pageSize: payload.pageSize,\n          [payload.currentPage]: payload.data\n        })\n      };\n    // Set table page\n    case SET_TABLE_PAGE:\n      return {\n        ...state,\n        [id]: Object.assign({}, state[id], {\n          currentPage: payload\n        })\n      };\n    // Fetch table list error\n    case FETCH_TABLE_LIST_FAIL:\n      return {\n        ...state,\n        [id]: Object.assign({}, state[id], { isFetching: false })\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}